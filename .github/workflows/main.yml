name: Build

defaults:
  run:
    shell: bash

on: push

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact-name: linux-artifacts
          - os: windows-latest
            artifact-name: windows-artifacts
    steps:
      # Checkout the repository and the juce submodule recursively
    - uses: actions/checkout@v2
      with:
        submodules: recursive

      # perform the build
    - uses: Barabas5532/juce-linux-build-action@v5
      if: ${{ contains(matrix.os, 'ubuntu') }}

    - uses: Barabas5532/juce-windows-build-action@v3
      if: ${{ contains(matrix.os , 'windows') }}

      # save the artifacts
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.artifact-name }}
        path: |
          build/*_artefacts
          !build/*_artefacts/JuceLibraryCode

  release:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      # Checkout the repository and the juce submodule recursively
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Print working directory
      run: pwd

    - uses: actions/download-artifact@v2
      with:
        path: ~/artifacts

    - name: Display structure of downloaded files
      run: ls -R ~/artifacts

    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

    - name: Package for Linux
      id: package_linux
      run: |
        ./.github/package-linux.sh ~/artifacts/linux-artifacts/*_artefacts/Release $OUTPUT_NAME
        echo ::set-output name=name::$OUTPUT_NAME
      env:
        OUTPUT_NAME: ${{ github.event.repository.name }}-${{ steps.get_version.outputs.VERSION }}-linux

    - name: Compress Linux
      run: tar -czf ${{ steps.package_linux.outputs.name }}.tar.gz ${{ steps.package_linux.outputs.name }}

    - name: Package for Windows
      id: package_windows
      run: |
        ./.github/package-windows.sh ~/artifacts/windows-artifacts/*_artefacts/Release $OUTPUT_NAME
        echo ::set-output name=name::$OUTPUT_NAME
      env:
        OUTPUT_NAME: ${{ github.event.repository.name }}-${{ steps.get_version.outputs.VERSION }}-windows

    - name: Compress Windows
      uses: montudor/action-zip@v1
      with:
        args: zip -qq -r ${{ steps.package_windows.outputs.name }}.zip ${{ steps.package_windows.outputs.name }}

    # Create the release, including the artifacts in it
    - uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ steps.package_linux.outputs.name }}.tar.gz
          ${{ steps.package_windows.outputs.name }}.zip
    if: startsWith(github.ref, 'refs/tags/v')
